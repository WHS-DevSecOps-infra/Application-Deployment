name: Terraform Apply

on:
  push:
    branches: [main]

permissions:
  contents: read
  id-token: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Filter Paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            operation:
              - 'operation-team-account/**'
            identity:
              - 'identity-team-account/**'
            prod:
              - 'prod-team-account/**'
            dev:
              - 'dev-team-account/**'
            security:
              - 'security-team-account/**'
            stage:
              - 'stage-team-account/**'
            management:
              - 'management-team-account/**'

      - name: Build Matrix from Filter (with subdirs)
        id: set
        env:
          FILTER_OUTPUTS_operation: ${{ steps.filter.outputs.operation }}
          FILTER_OUTPUTS_identity: ${{ steps.filter.outputs.identity }}
          FILTER_OUTPUTS_prod: ${{ steps.filter.outputs.prod }}
          FILTER_OUTPUTS_dev: ${{ steps.filter.outputs.dev }}
          FILTER_OUTPUTS_security: ${{ steps.filter.outputs.security }}
          FILTER_OUTPUTS_stage: ${{ steps.filter.outputs.stage }}
          FILTER_OUTPUTS_management: ${{ steps.filter.outputs.management }}
        run: |
          declare -A ROLE_MAP=(
            ["operation"]="ROLE_ARN_OPERATION"
            ["identity"]="ROLE_ARN_IDENTITY"
            ["prod"]="ROLE_ARN_PROD"
            ["dev"]="ROLE_ARN_DEV"
            ["security"]="ROLE_ARN_SECURITY"
            ["stage"]="ROLE_ARN_STAGE"
            ["management"]="ROLE_ARN_MANAGEMENT"
          )

          # 변경된 모든 서비스 폴더(backend.tf가 있는 폴더)를 찾습니다.
          CHANGED_DIRS=()
          # main 브랜치와 현재 커밋(HEAD) 사이의 변경된 파일 목록을 가져옵니다.
          CHANGED_FILES=$(git diff --name-only origin/main HEAD)
          
          for KEY in "${!ROLE_MAP[@]}"; do
            VAR_NAME="FILTER_OUTPUTS_${KEY}"
            VALUE="${!VAR_NAME}"
            # paths-filter가 해당 계정에 변경이 있다고 감지한 경우에만 실행합니다.
            if [ "$VALUE" = "true" ]; then
              BASE_DIR="${KEY}-team-account"
              # 해당 계정 폴더 내에서 backend.tf를 가진 모든 하위 폴더를 찾습니다.
              for DIR in $(find "$BASE_DIR" -name 'backend.tf' -exec dirname {} \;); do
                # 그 폴더가 실제 변경된 파일 목록에 포함되는지 확인합니다.
                if echo "$CHANGED_FILES" | grep -q "^$DIR/"; then
                  CHANGED_DIRS+=("$DIR")
                fi
              done
            fi
          done

          # 중복 제거 및 최종 변경 목록 확인
          CHANGED_DIRS=($(echo "${CHANGED_DIRS[@]}" | tr ' ' '\n' | sort -u))
          if [ ${#CHANGED_DIRS[@]} -eq 0 ]; then
            echo "No terraform directories with changes found."
            echo "matrix=[]" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "Changed directories to be processed: ${CHANGED_DIRS[@]}"

          # 각 폴더의 의존성(terraform_remote_state)을 분석하여 배포 순서를 결정합니다.
          TSORT_INPUT=""
          ALL_DIRS="${CHANGED_DIRS[@]}"
          for DIR in "${CHANGED_DIRS[@]}"; do
            dependencies=$(grep -r 'key\s*=' "$DIR" | sed -E 's/.*key\s*=\s*"(.*)\/terraform.tfstate".*/\1/' | sed -E 's|/|-team-account/|' || true)
            for DEP in $dependencies; do
              TSORT_INPUT+="$DEP $DIR\n"
              ALL_DIRS+=" $DEP"
            done
          done
          ALL_DIRS=$(echo "$ALL_DIRS" | tr ' ' '\n' | sort -u)

          # tsort로 올바른 배포 순서를 결정합니다.
          ORDERED_DIRS=$(echo -e "$TSORT_INPUT" | tsort 2>/dev/null || echo "$ALL_DIRS")
          echo "Calculated execution order: $ORDERED_DIRS"

          # 실행할 최종 매트릭스를 JSON 형식으로 생성합니다.
          MATRIX_ITEMS=()
          for DIR in $ORDERED_DIRS; do
            if [[ " ${CHANGED_DIRS[@]} " =~ " ${DIR} " ]]; then
              ACCOUNT_PREFIX=$(echo $DIR | cut -d- -f1)
              ROLE_KEY="${ROLE_MAP[$ACCOUNT_PREFIX]}"
              MATRIX_ITEMS+=("{\"dir\":\"$DIR\",\"role_key\":\"$ROLE_KEY\"}")
            fi
          done

          if [ ${#MATRIX_ITEMS[@]} -eq 0 ]; then
            echo "matrix=[]" >> $GITHUB_OUTPUT
          else
            JSON="[$(IFS=,; echo "${MATRIX_ITEMS[*]}")]"
            echo "matrix=$JSON" >> $GITHUB_OUTPUT
          fi

  terraform-apply:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.matrix != '[]' }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          role-to-assume: ${{ secrets[matrix.role_key] }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.4.0

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ matrix.dir }}

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ${{ matrix.dir }}
