name: Terraform Apply

on:
  push:
    branches: [main] # main 브랜치에 push될 때 실행

permissions:
  contents: read # 코드 리포지토리 읽기 권한
  id-token: write # OIDC 인증을 위한 ID 토큰 발급 권한

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }} # 다음 job에 전달할 matrix 출력
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3 # 현재 리포지토리 코드 체크아웃

      - name: Filter Paths
        id: filter
        uses: dorny/paths-filter@v3 # 어떤 디렉토리에 변경이 있는지 필터링
        with:
          filters: |
            operation:
              - 'operation-team-account/**'
            identity:
              - 'identity-team-account/**'
            prod:
              - 'prod-team-account/**'
            dev:
              - 'dev-team-account/**'
            stage:
              - 'stage-team-account/**'


      - name: Build Matrix from Filter (with subdirs)
        id: set
        env:
          # 필터링된 결과를 환경변수로 받아옴
          FILTER_OUTPUTS_operation: ${{ steps.filter.outputs.operation }}
          FILTER_OUTPUTS_identity: ${{ steps.filter.outputs.identity }}
          FILTER_OUTPUTS_prod: ${{ steps.filter.outputs.prod }}
          FILTER_OUTPUTS_dev: ${{ steps.filter.outputs.dev }}
          FILTER_OUTPUTS_stage: ${{ steps.filter.outputs.stage }}
        run: |
          # 계정 별 IAM Role Key 매핑
          declare -A ROLE_MAP=(
            ["operation"]="ROLE_ARN_OPERATION"
            ["identity"]="ROLE_ARN_IDENTITY"
            ["prod"]="ROLE_ARN_PROD"
            ["dev"]="ROLE_ARN_DEV"
            ["stage"]="ROLE_ARN_STAGE"

          )

          declare -A DEPENDENCY_MAP=(
            ["prod-team-account/vpc"]=""
            ["prod-team-account/iam"]=""
            ["prod-team-account/acm"]=""
            ["operation-team-account/ecr"]="prod-team-account/deploy/iam"
            ["prod-team-account/alb"]="prod-team-account/deploy/vpc prod-team-account/deploy/acm"
            ["prod-team-account/ecs"]="prod-team-account/deploy/vpc prod-team-account/deploy/iam prod-team-account/deploy/alb operation-team-account/deploy/ecr"
            ["prod-team-account/codedeploy"]="prod-team-account/deploy/ecs"
          )

          # Push 이벤트에 포함된 변경된 파일 목록을 호출
          echo "Comparing changes between ${{ github.event.before }} and ${{ github.event.after }}"
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
          
          # 변경된 파일이 속한 서비스 폴더(backend.tf가 있는 폴더) 목록 검색
          CHANGED_DIRS=()
          for file in $CHANGED_FILES; do
            dir=$(dirname "$file")
            while [ "$dir" != "." ]; do
              if [ -f "$dir/backend.tf" ]; then
                CHANGED_DIRS+=("$dir"); break;
              fi;
              dir=$(dirname "$dir");
            done
          done
          CHANGED_DIRS=($(echo "${CHANGED_DIRS[@]}" | tr ' ' '\n' | sort -u))
          
          if [ ${#CHANGED_DIRS[@]} -eq 0 ]; then
            echo "No terraform project directories with changes found."; echo "matrix=[]" >> $GITHUB_OUTPUT; exit 0;
          fi
          echo "Changed project directories: ${CHANGED_DIRS[@]}"

          # 변경된 폴더와 정의된 의존성을 기반으로 배포 순서를 결정
          TSORT_INPUT=""
          ALL_DIRS_TO_CONSIDER="${CHANGED_DIRS[@]}"
          for DIR in "${CHANGED_DIRS[@]}"; do
            dependencies=${DEPENDENCY_MAP[$DIR]}
            for DEP in $dependencies; do
              TSORT_INPUT+="$DEP $DIR\n"; ALL_DIRS_TO_CONSIDER+=" $DEP";
            done
          done
          ALL_DIRS_TO_CONSIDER=($(echo "$ALL_DIRS_TO_CONSIDER" | tr ' ' '\n' | sort -u))
          
          ORDERED_DIRS=$(echo -e "$TSORT_INPUT" | tsort 2>/dev/null || echo "$ALL_DIRS_TO_CONSIDER")
          echo "Calculated execution order: $ORDERED_DIRS"

          # 실행할 최종 매트릭스를 JSON 형식으로 생성
          MATRIX_ITEMS=()

          for DIR in $ORDERED_DIRS; do
            if [[ " ${CHANGED_DIRS[@]} " =~ " ${DIR} " ]]; then
              ACCOUNT_PREFIX=$(echo $DIR | cut -d- -f1)
              ROLE_KEY="${ROLE_MAP[$ACCOUNT_PREFIX]}"
              MATRIX_ITEMS+=("{\"dir\":\"$DIR\",\"role_key\":\"$ROLE_KEY\"}")

              # 루트 디렉터리 검사
              TF_COUNT_ROOT=$(find "$BASE_DIR" -maxdepth 1 -name '*.tf' | wc -l)
              if [ "$TF_COUNT_ROOT" -gt 0 ]; then
                MATRIX_ITEMS+=("{\"dir\":\"$BASE_DIR\",\"role_key\":\"${ROLE_MAP[$KEY]}\"}")
              fi

              # 하위 디렉터리 검사
              for DIR in $(find $BASE_DIR -type d -mindepth 1); do
                if [[ "$DIR" != *".terraform"* && "$DIR" != "$BASE_DIR/modules" ]]; then
                  TF_COUNT=$(find "$DIR" -maxdepth 1 -name '*.tf' | wc -l)
                  if [ "$TF_COUNT" -gt 0 ]; then
                    MATRIX_ITEMS+=("{\"dir\":\"$DIR\",\"role_key\":\"${ROLE_MAP[$KEY]}\"}")
                  fi
                fi
              done

            fi
          done

          # 최종 matrix JSON 출력
          if [ ${#MATRIX_ITEMS[@]} -eq 0 ]; then
            echo "matrix=[]" >> $GITHUB_OUTPUT
          else
            JSON="[$(IFS=,; echo "${MATRIX_ITEMS[*]}")]"; echo "matrix=$JSON" >> $GITHUB_OUTPUT;
          fi

  terraform-apply:
    needs: detect-changes # detect-changes job 이후 실행
    if: ${{ needs.detect-changes.outputs.matrix != '[]' }} # 변경사항이 있을 경우에만 실행
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        include: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          role-to-assume: ${{ secrets[matrix.role_key] }} # OIDC 기반으로 계정별 IAM Role Assume

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.4.0 # Terraform 버전 명시

      - name: Terraform Init
        run: terraform init # Terraform 초기화: 백엔드 설정 및 provider 다운로드
        working-directory: ${{ matrix.dir }} # matrix로 전달된 디렉토리에서 실행

      - name: Terraform Apply
        run: terraform apply -auto-approve # 사용자 승인 없이 자동 적용
        working-directory: ${{ matrix.dir }}
