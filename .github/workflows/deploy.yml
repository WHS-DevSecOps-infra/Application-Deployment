name: Deploy Application to ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
  ECS_CLUSTER_NAME: "ecs-cluster"
  ECS_SERVICE_NAME: "ecs-service"
  CODEDEPLOY_APP_NAME: "ecs-app"
  CODEDEPLOY_DEPLOYMENT_GROUP: "ecs-deployment-group"
  CONTAINER_NAME: "ecs-container"

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          IMAGE_TAG=$(echo "${{ github.sha }}" | cut -c1-7)
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "image_uri=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Render Amazon ECS task definition
        id: render-task-def
        run: |
          TASK_DEF_TEMPLATE=$(cat task-definition.template.json)
          NEW_TASK_DEF_CONTENT=$(echo "$TASK_DEF_TEMPLATE" | sed "s|<IMAGE_URI>|${{ steps.build-image.outputs.image_uri }}|")
          echo "$NEW_TASK_DEF_CONTENT" > new-task-definition.json
          echo "task_definition_path=$(pwd)/new-task-definition.json" >> $GITHUB_OUTPUT

      - name: Register new task definition
        id: register-task-def
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://${{ steps.render-task-def.outputs.task_definition_path }} --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "task_definition_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT
      
      - name: Render AppSpec
        id: render-appspec
        run: |
          APPSPEC_TEMPLATE=$(cat appspec.template.yml)
          NEW_APPSPEC_CONTENT=$(echo "$APPSPEC_TEMPLATE" | sed "s|<TASK_DEFINITION>|${{ steps.register-task-def.outputs.task_definition_arn }}|")
          echo "$NEW_APPSPEC_CONTENT" > appspec.yml
          
      - name: Start CodeDeploy Deployment
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODEDEPLOY_APP_NAME }} \
            --deployment-group-name ${{ env.CODEDEPLOY_DEPLOYMENT_GROUP }} \
            --revision "revisionType=AppSpecContent,appSpecContent={content=`cat appspec.yml`}"